#===============================================================================

						#  computeTrueRelProbDist.v4.py.scratch

#  Compute the true relative probability distribution for each species.

#  Make up a fake rule for how the matrices combine to form a
#  probability distribution over the image.
#  In this case, just make it be the pixelwise product of the two images.

#===============================================================================

#  source ('computeTrueRelProbDist.R')

#  History:

#  2013.08.04 - BTL
#  Converted to python for inclusion as a new method in the Guppy class.

#  2013.04.16 - BTL -  v4
#  Abandoning the S4 nonsense.  Reverting to v2 version of this file.

#  2013.04.16 - BTL -  v3
#  Trying to convert this to S4 objects, but once again, it's proving difficult
#  to figure out how to phrase things since the R documentation tends to only
#  give examples for methods like "plot", rather than more complicated things
#  that I want to do.  Plus, I can't see the command to do the setGeneric()
#  for plot() and that means I'm uncertain how to mimic it.  This is probably
#  a complete waste of time and I should just get something working now and
#  do the oop stuff in python instead of endlessly screwing around with
#  guessing the appropriate syntax and trickery for S4 in R.

#  2013.04.14 - BTL -  v2
#  Pulling out the bit that writes the matrix to a file and moving it up a
#  couple of levels to the file computeSppDistributions.R since that's
#  where the true prob distribution is built.  Here you're only normalizing
#  any matrix that you're handed, so it shouldn't be writing the matrix to
#  a file as the true probability distribution.

#  2013 04 04 - BTL - v1
#  Extracted from guppy.test.maxent.v9.R.

#===============================================================================

#  NOTE: This section that computes a probability distribution by combining
#        environment layers is Extremely simplistic right now.
#        The beginnings of a more complex version of it can be found in
#        Desktop/MaxentTests/test.maxent.v4.R where things like hinge functions
#        are mentioned.  I think that is where I was working on it at Austin ESA
#        but ran out of time and reverted back to this very simple version.
#        I think that there may be some better examples in a Dorfmann paper
#        that simulated various species, but I think the paper is at home.
#        I think that he had 3 main classes of combining functions.
#        BTL - 2011.09.22

#===============================================================================

def normalizeProbDistributionFromEnvLayers (self, relProbMatrix):
        #normalizeProbDistributionFromEnvLayers = function (envLayers)

		#--------------------------------------------------------------------------
    	#  Normalize the values to get a probability distribution over the image,
    	#  i.e., make them all sum to one.
		#--------------------------------------------------------------------------

	#print "\nAt start of normalizeProb...()\n"


	totRelProbMatrix = sum (relProbMatrix)
	print "\ntotRelProbMatrix = " + totRelProbMatrix + "\n"

	normProbMatrix = relProbMatrix / totRelProbMatrix
	print "\nsum of normProbMatrix = " + str (sum (normProbMatrix)) + " (should = 1).\n"

	return (normProbMatrix)

#===============================================================================

def computeRelProbDistARITH (self, sppId, sppName, self.envLayers, numEnvLayers):

	print "\n\nin computeRelProbDist, numEnvLayers = '" + str (numEnvLayers) + "'\n"
	print "\n\nlength (self.envLayers) = '", str (length (self.envLayers)) + "'\n"

	normProbMatrix = None

	if PARuseOldMaxentOutputForInput:
		normProbMatrix = readAscFileToMatrix (sppName, \
#									           (sppName + ".asc"),
									            PARoldMaxentOutputDir)
		normProbMatrix = \
				normalizeProbDistributionFromEnvLayers (normProbMatrix)

	else:
		relProbMatrix = matrix ()

		if sppId == 1:
			combinationRule = CONST.productRule
		else:
			combinationRule = CONST.addRule

		if combinationRule == CONST.productRule:
			print "\n\nusing product rule\n"
			relProbMatrix = self.envLayers [[1]]
			print "\n\nlength (self.envLayers) BEFORE product = '" + \
			        str (length (self.envLayers)) + "'\n"
			for (curEnvLayerIdx in 2:numEnvLayers):
				print "\n\ndim (relProbMatrix) BEFORE product = '" + \
				        dim (relProbMatrix) + "'\n"
				print "\n\nclass (relProbMatrix) BEFORE product = '" + \
				        class (relProbMatrix) + "'\n"
				print "\n\nrelProbMatrix [1:3,1:3] = \n" + \
				        relProbMatrix [1:3,1:3]  #  Echo a bit of the result...
				for (row in 1:3):
					for (col in 1:3):
						print "\nrelProbMatrix [" + str (row) + ", " + \
						        str (col) + "] = " + \
						        relProbMatrix [row, col] + \
						        ", and class = " + \
						        class(relProbMatrix[row,col])
				#*****#
				#print "\n\n    All done     \n\n"
				#stop ("\nSTOP\n")
				#*****#

				print "\n\ndim (relProbMatrix) BEFORE product = '" + \
				        dim (relProbMatrix) + "'\n"
				print "\n\nself.envLayers [[curEnvLayerIdx]] [1:3,1:3] = \n" + \
				        self.envLayers [[curEnvLayerIdx]] [1:3,1:3]    #  Echo a bit of the result...
				for (row in 1:3):
					for (col in 1:3):
						print "\nself.envLayers [[curEnvLayerIdx]] [" + \
						        str (row) + ", " + str (col) + "] = " + \
						        self.envLayers [[curEnvLayerIdx]][row,col] + \
						        ", and class = " + \
						        class(self.envLayers [[curEnvLayerIdx]][row,col])

				relProbMatrix = relProbMatrix * self.envLayers [[curEnvLayerIdx]]
				print "\n\ndim (relProbMatrix) AFTER product = '" + \
				    dim (relProbMatrix) + "'\n"

	    elif (combinationRule == CONST.addRule):

            print "\n\nusing add rule\n"
            relProbMatrix = self.envLayers [[1]]
            for (curEnvLayerIdx in 2:numEnvLayers):
                relProbMatrix = relProbMatrix + self.envLayers [[curEnvLayerIdx]]

	    else:  #  unknown combination rule
			stop ("\n\nUndefined combination rule for environmental layers.\n\n")


		print "\n\ndim (relProbMatrix) = '" + dim (relProbMatrix) + "'\n"

		print relProbMatrix [1:3,1:3]    #  Echo a bit of the result...

		normProbMatrix =
				normalizeProbDistributionFromEnvLayers (relProbMatrix)

	return (normProbMatrix)

#===============================================================================

