#===============================================================================

						#  computeSppDistributions.v2.py.scratch

#===============================================================================

#  History:

#  2013.08.05 - BTL
#  Converting to python and adding to Guppy class.

#  2013.04.14 - BTL -  v2
#  Inserting bits that write the matrix to a file that used to be in
#  computeTrueRelProbDist.R.  There, you're only normalizing
#  any matrix that you're handed, so it shouldn't be writing the matrix to
#  a file as the true probability distribution.

#  2013 04 13? - BTL - v1
#  Extracted from guppy.test.maxent.v9.R.

#===============================================================================

strOfCommaSepNumbersToVec = function (numberString)
	{
	numStrAsCatCmdStr = paste ("c(", numberString, ")", sep='')

	return (eval (parse (text = numStrAsCatCmdStr)))
	}

#===============================================================================

	#---------------------------------------------------------------
	#  Determine the number of true presences for each species.
	#  At the moment, you can specify the number of true presences
	#  drawn for each species either by specifying a count for each
	#  species to be created or by specifying the bounds of a
	#  random fraction for each species.  The number of true
	#  presences will then be that fraction multiplied times the
	#  total number of pixels in the map.
	#---------------------------------------------------------------

def getNumTruePresencesForEachSpp (self):

	if self.variables ["PAR.use.random.num.true.presences"]:

			#-------------------------------------------------------------
			#  Draw random true presence fractions and then convert them
			#  into counts.
			#-------------------------------------------------------------

		print "\n\nIn getNumTruePresencesForEachSpp, case: random true pres"
		sppTruePresenceFractionsOfLandscape = \
			runif (self.variables ["PARnumSppToCreate"], \
				   min = self.variables ["PAR.min.true.presence.fraction.of.landscape"], \
				   max = self.variables ["PAR.max.true.presence.fraction.of.landscape"])

        print "\n\nsppTruePresenceFractionsOfLandscape = " + \
                str (sppTruePresenceFractionsOfLandscape)

		spp.true.presence.cts = round (num.cells * sppTruePresenceFractionsOfLandscape)
		print "\nspp.true.presence.cts = " + str (sppTruePresenceCts)

		numTruePresences = sppTruePresenceCts
		print "\nnumTruePresences = " + str (numTruePresences)

	else:

			#--------------------------------------------------
			#  Use non-random, fixed counts of true presences
			#  specified in the yaml file.
			#--------------------------------------------------

#		numTruePresences = self.variables ["PAR.num.true.presences"]
		numTruePresences = \
			strOfCommaSepNumbersToVec (self.variables ["PAR.num.true.presences"])

        print "\n\nIn getNumTruePresencesForEachSpp, case: NON-random true pres"
        print "\n\nnumTruePresences = '" + str (numTruePresences) + "'"
        print "\nclass (numTruePresences) = '" + class (numTruePresences) + "'"
        print "\nis.vector (numTruePresences) = '" + is.vector (numTruePresences) + "'"
        print "\nis.list (numTruePresences) = '" + is.list (numTruePresences) + "'"
        print "\nlength (numTruePresences) = '" + length (numTruePresences) + "'"
        for (i in 1:length (numTruePresences))
            print "\n\tnumTruePresences [" + str (i) + "] = " + str (numTruePresences[i])

		if (length (numTruePresences) < PARnumSppToCreate):

			print "\n\nlength(PARnumTruePresences) = '" + \
					length (self.variables ["PAR.num.true.presences"]) + \
					"' but \nPARnumSppToCreate = '" + PARnumSppToCreate + \
					"'.\nMust specify at least as many presence cts as " + \
					"species to be created.\n\n"
			stop ()

	return (numTruePresences)

#===============================================================================

	#-----------------------------------------------------------------------
	#  Compute the true relative probability distribution for each species.
	#  This is where the generated equation is built and invoked, e.g.,
	#  adding or multiplying the env layers together to create a
	#  probability of presence of the current species at each pixel.
	#  The distribution that is generated is a relative distribution
	#  in that it does not give the probability of finding the species at
	#  that pixel in general.  It just gives a distribution of the
	#  relative probability of finding the species at that pixel compared
	#  to any other pixel in the bounds of this map.  It is intended to
	#  be used for drawing any given number of occurrences from the map
	#  rather than the actual probability that there will be something
	#  at each pixel.  To get that value, you would need to do something
	#  like taking the relative probabilities and choosing a threshold
	#  value below which you say the habitat is not suitable.  You could
	#  then consider all locations above the threshold to have a presence
	#  (and thereby derive the number of occurrences (i.e., abundance))
	#  instead of specifying it ahead of time as is done when generating
	#  occurrences directly from the relative distribution.  I think that
	#  some of the maxent papers may also specify some way of turning the
	#  relative probabilities (essentially "suitabilities") into true
	#  probabilities, but I can't remember where at the moment.
	#-----------------------------------------------------------------------

def getTrueRelProbDistsForAllSppARITH (self, envLayers, numEnvLayers):

	print "\n\nStarting getTrueRelProbDistsForAllSppARITH()."

	trueRelProbDistsForSpp =
		vector (mode="list", length=self.variables ["PARnumSppToCreate"])

	for sppId in 1:self.variables ["PARnumSppToCreate"]:

		sppName = 'spp.' + str (sppId)

		normProbMatrix = \
		    computeRelProbDistARITH (sppId, sppName, envLayers, numEnvLayers)

		trueRelProbDistsForSpp [[sppId]] = normProbMatrix
				##	last = length (trueRelProbDistsForSpp) + 1
				##	trueRelProbDistsForSpp [[last]] = normProbMatrix

		#===========================================================================

			#--------------------------------------------------------------------------------
			#  Write the normalized distribution to a csv image so that it can
			#  be inspected later if you want.
			#  May want to write to something other than csv, but it's easy for
			#  the moment.
			#
			#  One small problem:
			#  Can't seem to get write.csv() to leave off the column headings,
			#  no matter what options I choose.  R even complains if I use the
			#  col.names=NA option as advertised in the help file.
			#
			#  On the web, I did find a write.matrix() function in MASS that
			#  doesn't add the column headings, but it's much slower than
			#  write.csv() so I won't use it at this point.
			#      library (MASS)
			#      write.matrix (normProbMatrix, file = trueProbDistFilename, sep=',')
			#--------------------------------------------------------------------------------

		filenameRoot = probDistLayersDir + CONST.dirSlash + \
								self.variables ["PAR.trueProbDistFilePrefix"] + \
								"." + sppName
		numImgRows = normProbMatrix.shape [0]
		numImgCols = normProbMatrix.shape [1]

		trueProbDistCsvFilename = filenameRoot + ".csv"
		print "\nWriting normProbMatrix to " + trueProbDistCsvFilename
		write.csv (normProbMatrix, file = trueProbDistCsvFilename, row.names = FALSE)

		print "\nWriting normProbMatrix to ", filenameRoot, ".asc", "\n", sep='')

			#  NOTE:
			# Both the maxent env input layers (e.g., H05_1.asc) and the maxent
			# output layers have the following header when the image is 256x256:

			# ncols         256
			# nrows         256
			# xllcorner     1
			# yllcorner     1
			# cellsize      1
			# NODATA_value  -9999

			# Running write.asc() with the defaults gives the following header,
			# which Zonation chokes on (I think that it thinks all values are 0):

			# ncols         256
			# nrows         256
			# xllcorner     0
			# yllcorner     0
			# cellsize      1
			# NODATA_value  0

			# So, need to run write.asc() specifying all options to match the
			# maxent input headers.

		#  writeAscFile (normProbMatrix, filenameRoot, numImgRows, numImgCols);
		writeAscFile (normProbMatrix, filenameRoot, \
						  numImgRows, numImgCols \
						  , xllcorner = 1   \ #  Looks like maxent adds the xy values to xllcorner, yllcorner
						  , yllcorner = 1   \ #  so they must be (0,0) instead of (1,1), i.e., the origin
											\ #  is not actually on the map.  It's just off the lower
											\ #  left corner.
						  , noDataValue = -9999 \
						  , cellsize = 1 \
						 )

		print "\nWriting normProbMatrix to " + filenameRoot + ".pgm"
		write.pgm.file (normProbMatrix, filenameRoot, numImgRows, numImgCols);

		#--------------------------------------------------------------------------------

			#-----------------------------------------------------------------
			#  Show a heatmap representation of the probability distribution
			#  if desired.
			#-----------------------------------------------------------------

		#show.heatmap = FALSE
		#if (show.heatmap)

		if (FALSE):

				#-----------------------------------------------------------------------
				#  standard color schemes that I know of that you can use:
				#  heat.colors(n), topo.colors(n), terrain.colors(n), and cm.colors(n)
				#
				#  I took this code from an example I found on the web and it uses
				#  some options that I don't know anything about but it works.
				#  May want to refine it later.
				#-----------------------------------------------------------------------

			png (heatmapOutputFilename + ".png" \
				 #, width=600, height=589
				)

			heatmap (normProbMatrix, \
					Rowv = NA, Colv = NA, \
					col = heatColors (256), \
					###		 scale="column",    \ #  This can rescale colors within columns.
					margins = c (5,10) \
					)
			devOff()

#	return (trueRelProbDistsForSpp)

#===============================================================================

def getTrueRelProbDistsForAllSppMAXENT (envLayers, numEnvLayers):

	print "\n\nGenerate true rel prob map using maxent.\n\n"

    combinedSppPresTable = genCombinedSppPresTable (numRows, numCells)

    print "\n\ncombinedSppPresTable = \n"
    print combinedSppPresTable

    combinedSppPresencesFilename = curFullMaxentSamplesDirName + \
                                    CONST.dirSlash + \
                                    "maxentGenSppPresCombined" + ".csv"

    combinedSppPresTable.to_csv (combinedSppPresencesFilename, index=False)
#    writeCsv (combinedSppPresTable,
#               file = combinedSppPresencesFilename,
#               rowNames = FALSE,
#               quote=FALSE)


		#  Now have to make whatever changes and initializations are necessary to
		#  call maxent and have it generate new layers in the proper subdirectory
		#  and not do any bootstrapping.

		#  OUTPUTS FROM THIS GENERATOR NEED TO GO INTO THE MaxentProbDistLayers
		#  directory, just like the outputs of the arithmetic generator.
		#  Need to see where it builds its directory name and writes to it.

		#  Also, when maxent is finished generating these layers, there will probably
		#  be tons of crap left in there by maxent that needs to be deleted.
		#  This suggests it might be better to just make a scratch area for maxent
		#  to dump into and then just copy the species distribution files I need
		#  out of there and into the MaxentProbDistLayers directory.
		#  Call it MaxentProbDistGenOutputs.

		#----------------------------------------------------------------
		#  Run maxent to generate a true relative probability map.
		#----------------------------------------------------------------

	maxentSamplesFileName = combinedSppPresencesFilename
	maxentOutputDir = maxentGenOutputDir
	bootstrapMaxent = FALSE

	runMaxentCmd (maxentSamplesFileName, maxentOutputDir, bootstrapMaxent)

        #  NOW NEED TO CONVERT THE MAXENT OUTPUTS IN MaxentGenOutputs/plots/spp.?.asc
        #  into pgm and tiff?  Regardless, need to copy the .asc files into the
        #  MaxentProbDistLayers area as:
        #		true.prob.dist.spp.?.asc
        #  Then, possibly need to create these as well, just for diagnosis I think.
        #  I believe that maxent will run as soon as I get the asc files in there.
        #		true.prob.dist.spp.?.pgm
        #		true.prob.dist.spp.?.csv   ARE THESE CSV FILES REALLY NECESSARY?
        #									SEEMS LIKE I NEVER LOOK AT THEM...

        #  As soon as these files are moved and renamed, then I should be able to
        #  remove the stop() command below and the temporary call to get.true...()
        #  at the start of this else branch (surrounded by exclamation points)
        #  and the whole thing should run to completion.

        #  Once that works, then the only major thing left to do is to create
        #  smaller versions of all the files on the fly so that I can do more runs
        #  and use some parts Alex's big images as cross-validation and testing fodder.

	#maxentGenOutputDir = "../MaxentGenOutputs"
	#probDistLayersDir = "../MaxentProbDistLayers/"

        #  In R, list.files() produces a character vector of the names of
        #  files or directories in the named directory
	#fileRootNames = filePathSansExt (listFiles ('.','*.asc'))

	filesToCopyFrom = listFiles (maxentGenOutputDir, "*.asc", fullNames=TRUE)
	#filesToCopyFrom = filesToCopyFrom[[1]]
	print "\n\nfilesToCopyFrom = "
	print filesToCopyFrom
	print "\n\n"

	prefix = self.variables ["PAR.trueProbDistFilePrefix"] + "."
	print "\n\nprefix = " + prefix

	fileRootNames = listFiles (maxentGenOutputDir, '*.asc')
	print "\n\nfileRootNames =\n", fileRootNames)


	#"/Users/Bill/tzar/outputdata/Guppy/default_runset/200_Scen_1.inprogress/MaxentGenOutputs/spp.1.asc"
	#"/Users/Bill/tzar/outputdata/Guppy/default_runset/200_Scen_1.inprogress/MaxentGenOutputs/spp.1.asc"

	filesToCopyTo = probDistLayersDirWithSlash + prefix + fileRootNames
	#filesToCopyTo = probDistLayersDirWithSlash
	print "\n\nfilesToCopyTo = "
	print filesToCopyTo
	print "\n\n"

	#retVals = file.copy(fileRootNames, filesToCopyTo)
	retVals = fileCopy (filesToCopyFrom, filesToCopyTo)

	print "\n\nretVals for file.copy =\n" + retVals
	if length (which (not retVals)):
	    print "\n\nCopy failed.\n"
	    stop()

	print "\n\nDone copying files...\n\n"

## 		} else  #  No option chosen
## 		{
## 		print "\n\nNo option chosen for how to generate true rel prob map.\n\n")
## 		stop()
## 		}



#	return (trueRelProbDistsForSpp)

#===============================================================================

