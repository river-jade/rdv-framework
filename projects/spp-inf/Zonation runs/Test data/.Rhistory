names <- as.vector(read.table('//654cw-20990/Amy/GIS_data/Hunter/zonation/lower hunter/lh.zonation.spp', header=F, sep='\t')[,6])
names <- gsub('_LH.tif', '', names)
head(names)
length(names) #735
files <- list.files(input_path)
input_path <- '//654cw-20990/Amy/GIS_data/Hunter/zonation/lower hunter/Output/'
files <- list.files(input_path)
help(grep)
files <- grep('160414.curves.txt', list.files(input_path))
files
files <- grep('160414.curves.txt', list.files(input_path), value=T)
files
library(raster)
library(rgdal)
library(rasterVis)
library(maptools)
library(sp)
create.raster <- function (s, mask.raster, label, value, transform=TRUE) {
if(transform==TRUE) {
proj4string(s) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
s <- spTransform(s, CRS("+proj=utm +zone=56 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"))
}
r <- rasterize(s,mask.raster)
r[!is.na(r)] <- value
r <- mask(merge(r,mask.raster),mask.raster, filename=paste0(output.directory,label), format="GTiff", overwrite=T)
names(r) <- label
plot(r, main=label)
return(r)
}
mask_path <- ('C:/Users/hkujala/work/RSPs/Hunter/Zonation runs')
scenarios <- c('lep_plans_mask_v3', 'Express_Highway_Buffer_mask', 'Important_Agricultural_Lands_mask', 'All_UIA_mask', 'Mine_Leases&Appl_mask', 'DPI_10GrowthAreas_mask')
scenarios <- c('lep_plans_mask_v3', 'Express_Highway_Buffer_mask', 'Important_Agricultural_Lands_mask', 'All_UIA_mask', 'Mine_Leases&Appl_mask', 'DPI_10GrowthAreas_mask', 'DPI_10GrowthAreas_step_mask')
a <- raster(paste0(mask_path, scenarios[1]))
mask_path <- ('C:/Users/hkujala/work/RSPs/Hunter/Zonation runs/')
a <- raster(paste0(mask_path, scenarios[1]))
a <- raster(paste0(mask_path, scenarios[1],'.tiff'))
a <- raster(paste0(mask_path, scenarios[1],'.tif'))
help(freq)
freq(a)
classes <- freq(a)
(sum(classes$count[1:2]))/sum(classes$count)
(sum(classes[1:2,2]))/sum(classes[,2])
(sum(classes[1:2,2]))/sum(classes[,2],na.rm=T)
(sum(classes[1:2,2]))/sum(classes[1:3,2])
classes[1:2,2]
classes[1:3,2]
classes[classes[,1]<3,2]
(sum(classes[classes[,1]<3,2]))
(sum(classes[classes[,1]<3,2]),na.rm)
(sum(classes[classes[,1]<3,2]),na.rm=T)
help(na.rm)
help(na.rm)
??na.rm
(sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:3,2])
(sum(classes[classes[,1]<3,2]))/sum(classes[1:3,2])
(sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[,2], na.rm=T)
nrow(classes)-1
(sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2])
a <- raster(paste0(mask_path, scenarios[2],'.tif'))
classes <- freq(a)
classes
(sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2])
a <- raster(paste0(mask_path, scenarios[3],'.tif'))
classes <- freq(a)
(sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2])
cleared_area <- c()
cbind(cleared area) <- (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2])
help(cbind)
cbind(cleared area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
cbind(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
cbind(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
cleared_area <- cbind(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
cleared_area <- cbind(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
cleared_area
cleared_area <- c()
cleared_area <- c(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
cleared_area
cleared_area <- c(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
cleared_area
cleared_area <- c()
for (i in 1:length(scenarios)){
a <- raster(paste0(mask_path, scenarios[i],'.tif'))
classes <- freq(a)
cleared_area <- c(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
}
cleared_area
a <- raster(paste0(mask_path, scenarios[7],'.tif'))
classes <- freq(a)
classes
cleared_area <- c()
for (i in 1:length(scenarios)-1){
a <- raster(paste0(mask_path, scenarios[i],'.tif'))
classes <- freq(a)
cleared_area <- c(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
}
cleared_area
cleared_area <- c()
for (i in 1:(length(scenarios)-1){
a <- raster(paste0(mask_path, scenarios[i],'.tif'))
classes <- freq(a)
cleared_area <- c(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
}
length(scenarios)
length(scenarios)-1
1:(length(scenarios)-1)
i
for (i in 1:(length(scenarios)-1){
a <- raster(paste0(mask_path, scenarios[i],'.tif'))
classes <- freq(a)
cleared_area <- c(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
}
for (i in 1:(length(scenarios)-1)){
a <- raster(paste0(mask_path, scenarios[i],'.tif'))
classes <- freq(a)
cleared_area <- c(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
}
for (i in 1:(length(scenarios)-1)){
a <- raster(paste0(mask_path, scenarios[i],'.tif'))
classes <- freq(a)
cleared_area <- c(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
}
cleared_area <- c()
for (i in 1:(length(scenarios)-1)){
a <- raster(paste0(mask_path, scenarios[i],'.tif'))
classes <- freq(a)
cleared_area <- c(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
}
cleared_area
a <- raster(paste0(mask_path, scenarios[7],'.tif'))
classes <- freq(a)
(sum(classes[classes[,1]<11,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
(sum(classes[classes[,1]<11,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2])
cleared_area
a <- raster(paste0(mask_path, scenarios[6],'.tif'))
classes <- freq(a)
classes
(sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2])
(sum(classes[classes[,1]<3,2], na.rm=T)
)
sum(classes[1:nrow(classes)-1,2])
4676/293175
a <- raster(paste0(mask_path, scenarios[7],'.tif'))
classes <- freq(a)
classes
sum(classes[classes[,1]<11,2], na.rm=T)
a <- raster(paste0(mask_path, scenarios[6],'.tif'))
classes <- freq(a)
(sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2])
cleared_area
cleared_area <- c(cleared_area, (sum(classes[classes[,1]<3,2], na.rm=T))/sum(classes[1:nrow(classes)-1,2]))
cleared_area
files
files <- files[-9]
files <- files[-8]
files
loss.table <- as.data.frame(matrix(NA, length(files), 12))
dim(loss.table)
help(grep)
files <- sub('160414.curves.txt', '', files)
files
files <- sub('output_', '', files)
files
loss.table <- as.data.frame(matrix(NA, length(files), 12))
dim(loss.table)
files <- grep('160414.curves.txt', list.files(input_path), value=T)
files <- files[-9]
files <- files[-8]
for (h in 1:length(files)){
# Name of original curves file
input <- paste0(input_path, files[h])
# Upload the curves file
curves <- read.table(input, skip=1, header=F, sep='')
colnames(curves) <- c('Prop_landscape_lost', 'cost_needed_for_top_fraction', 'min_prop_rem', 'ave_prop_rem', 'W_prop_rem', 'ext-1', 'ext-2', names)
loss.table[h,1] <- scenarios[h]
loss.table[h,2] <- cleared_area[h]*100
loss.table[h,3] <- 100-(curves[curves$Prop_landscape_lost == cleared_area[h], 4]*100)
loss.table[h,4] <- 100-(curves[curves$Prop_landscape_lost == cleared_area[h], 3]*100)
loss.table[h,5] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] == 0))
loss.table[h,6] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] == 0)+7])), sep=',')
loss.table[h,7] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.1))
loss.table[h,8] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.1)+7])), sep=',')
loss.table[h,9] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.25))
loss.table[h,10] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.25)+7])), sep=',')
loss.table[h,11] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.5))
loss.table[h,12] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.5)+7])), sep=',')
}
h
input
loss.table
100-(curves[curves$Prop_landscape_lost == cleared_area[h], 4]*100)
curves[curves$Prop_landscape_lost == cleared_area[h], 4]
curves[curves$Prop_landscape_lost == cleared_area[h]
]
cleared_area
cleared_area <- c(0.0989, 0.0020, 0.0590, 0.1479, 0.2589, 0.0160, 0.0160)
for (h in 1:length(files)){
# Name of original curves file
input <- paste0(input_path, files[h])
# Upload the curves file
curves <- read.table(input, skip=1, header=F, sep='')
colnames(curves) <- c('Prop_landscape_lost', 'cost_needed_for_top_fraction', 'min_prop_rem', 'ave_prop_rem', 'W_prop_rem', 'ext-1', 'ext-2', names)
loss.table[h,1] <- scenarios[h]
loss.table[h,2] <- cleared_area[h]*100
loss.table[h,3] <- 100-(curves[curves$Prop_landscape_lost == cleared_area[h], 4]*100)
loss.table[h,4] <- 100-(curves[curves$Prop_landscape_lost == cleared_area[h], 3]*100)
loss.table[h,5] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] == 0))
loss.table[h,6] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] == 0)+7])), sep=',')
loss.table[h,7] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.1))
loss.table[h,8] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.1)+7])), sep=',')
loss.table[h,9] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.25))
loss.table[h,10] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.25)+7])), sep=',')
loss.table[h,11] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.5))
loss.table[h,12] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.5)+7])), sep=',')
}
colnames(loss.table) <- c('Scenario', '%_area_cleared', 'mean_loss(%)', 'max_loss(%)', '100%_loss_#', '100%_loss_sp', '90%_loss_#', '90%_loss_sp', '75%_loss_#', '75%_loss_sp', '50%_loss_#', '50%_loss_sp')
loss.table
for (h in 1:length(files)){
# Name of original curves file
input <- paste0(input_path, files[h])
# Upload the curves file
curves <- read.table(input, skip=1, header=F, sep='')
colnames(curves) <- c('Prop_landscape_lost', 'cost_needed_for_top_fraction', 'min_prop_rem', 'ave_prop_rem', 'W_prop_rem', 'ext-1', 'ext-2', names)
loss.table[h,1] <- sub('.curves.txt', '', files[h])
loss.table[h,2] <- cleared_area[h]*100
loss.table[h,3] <- 100-(curves[curves$Prop_landscape_lost == cleared_area[h], 4]*100)
loss.table[h,4] <- 100-(curves[curves$Prop_landscape_lost == cleared_area[h], 3]*100)
loss.table[h,5] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] == 0))
loss.table[h,6] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] == 0)+7])), sep=',')
loss.table[h,7] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.1))
loss.table[h,8] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.1)+7])), sep=',')
loss.table[h,9] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.25))
loss.table[h,10] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.25)+7])), sep=',')
loss.table[h,11] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.5))
loss.table[h,12] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.5)+7])), sep=',')
}
colnames(loss.table) <- c('Scenario', '%_area_cleared', 'mean_loss(%)', 'max_loss(%)', '100%_loss_#', '100%_loss_sp', '90%_loss_#', '90%_loss_sp', '75%_loss_#', '75%_loss_sp', '50%_loss_#', '50%_loss_sp')
loss.table
files
cleared_area <- c(0.0989, 0.0590, 0.1479, 0.0160, 0.0160, 0.0020, 0.2589)
# creating the loss table
for (h in 1:length(files)){
# Name of original curves file
input <- paste0(input_path, files[h])
# Upload the curves file
curves <- read.table(input, skip=1, header=F, sep='')
colnames(curves) <- c('Prop_landscape_lost', 'cost_needed_for_top_fraction', 'min_prop_rem', 'ave_prop_rem', 'W_prop_rem', 'ext-1', 'ext-2', names)
loss.table[h,1] <- sub('.curves.txt', '', files[h])
loss.table[h,2] <- cleared_area[h]*100
loss.table[h,3] <- 100-(curves[curves$Prop_landscape_lost == cleared_area[h], 4]*100)
loss.table[h,4] <- 100-(curves[curves$Prop_landscape_lost == cleared_area[h], 3]*100)
loss.table[h,5] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] == 0))
loss.table[h,6] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] == 0)+7])), sep=',')
loss.table[h,7] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.1))
loss.table[h,8] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.1)+7])), sep=',')
loss.table[h,9] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.25))
loss.table[h,10] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.25)+7])), sep=',')
loss.table[h,11] <- length(which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.5))
loss.table[h,12] <- paste(list(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.5)+7])), sep=',')
}
colnames(loss.table) <- c('Scenario', '%_area_cleared', 'mean_loss(%)', 'max_loss(%)', '100%_loss_#', '100%_loss_sp', '90%_loss_#', '90%_loss_sp', '75%_loss_#', '75%_loss_sp', '50%_loss_#', '50%_loss_sp')
loss.table
output_path <- 'C:/Users/hkujala/work/RSPs/Hunter'
write.table(loss.table, paste0(output_path, 'LH_Development plan impacts.txt'), col.names=T, row.names=F, sep='\t')
impact.sp <- merge(colnames(curves[which(curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)] <= 0.5)+7]), data, by.x=1, by.y='Scientific.Name', sort=F)
lh <- raster('C:/Users/hkujala/work/RSPs/Hunter/data/LH.clipping.mask.tif')
plot(lh)
plans <- readShapePoly('C:/Users/hkujala/work/RSPs/Hunter/data/From DO/DPI GrowthAreaProposals/LHSA_Ten_GrowthAreaProposals_noInternalines')
plot(plans, add=T)
help(merge)
DPI_dev.proposal <- rasterize(plans, lh, field='SizeID')
plot(DPI_dev.proposal)
lh.high <- lh
lh.high[!is.na(lh.high)] <- 11
DPI_plans_step <- merge(DPI_dev.proposal, lh.high)
help(merge)
plot(DPI_plans_step)
help(clip)
help(mask)
DPI_plans_step <- mask(DPI_plans_step, lh.high)
plot(DPI_plans_step)
extent(DPI_plans_step)
extent(lh)
writeRaster(DPI_plans_step, paste0(output.directory, 'DPI_10GrowthAreas_step_mask'), format='GTiff', overwrite=T)
output.directory <- 'C:/Users/hkujala/work/RSPs/Hunter/Zonation runs/'
writeRaster(DPI_plans_step, paste0(output.directory, 'DPI_10GrowthAreas_step_mask'), format='GTiff', overwrite=T)
# creating the loss table
for (h in 1:length(files)){
# Name of original curves file
input <- paste0(input_path, files[h])
# Upload the curves file
curves <- read.table(input, skip=1, header=F, sep='')
colnames(curves) <- c('Prop_landscape_lost', 'cost_needed_for_top_fraction', 'min_prop_rem', 'ave_prop_rem', 'W_prop_rem', 'ext-1', 'ext-2', names)
a <- curves[curves$Prop_landscape_lost == cleared_area[h], 8:ncol(curves)]
loss.table[h,1] <- sub('.curves.txt', '', files[h])
loss.table[h,2] <- cleared_area[h]*100
loss.table[h,3] <- 100-(curves[curves$Prop_landscape_lost == cleared_area[h], 4]*100)
loss.table[h,4] <- 100-(curves[curves$Prop_landscape_lost == cleared_area[h], 3]*100)
loss.table[h,5] <- length(which(a == 0))
loss.table[h,6] <- paste(list(colnames(curves[which(a == 0)+7])), sep=',')
loss.table[h,7] <- length(which(a > 0 & a <= 0.1))
loss.table[h,8] <- paste(list(colnames(curves[which(a > 0 & a <= 0.1)+7])), sep=',')
loss.table[h,9] <- length(which(a > 0.1 & a <= 0.25))
loss.table[h,10] <- paste(list(colnames(curves[which(a > 0.1 & a <= 0.25)+7])), sep=',')
loss.table[h,11] <- length(which(a > 0.25 & a <= 0.5))
loss.table[h,12] <- paste(list(colnames(curves[which(a > 0.25 & a <= 0.5)+7])), sep=',')
}
colnames(loss.table) <- c('Scenario', '%_area_cleared', 'mean_loss(%)', 'max_loss(%)', '100%_loss_#', '100%_loss_sp', '90%_loss_#', '90%_loss_sp', '75%_loss_#', '75%_loss_sp', '50%_loss_#', '50%_loss_sp')
loss.table
write.table(loss.table, paste0(output_path, 'LH_Development plan impacts.txt'), col.names=T, row.names=F, sep='\t')
output_path <- 'C:/Users/hkujala/work/RSPs/Hunter/'
write.table(loss.table, paste0(output_path, 'LH_Development plan impacts.txt'), col.names=T, row.names=F, sep='\t')
setwd("C:/Users/hkujala/work/Species influence/src/Zonation runs/Test data")
library(raster)
library(sp)
out_all <- raster('Output/out_all.rank.asc')
out_sp1 <- raster('Output/out_missingSp1.rank.asc')
diff <- out_all - out_sp1
sum(abs(getValues(diff)))
sum(abs(getValues(diff)), na.rm=T)
head(abs(getValues(diff))
)
head(abs(getValues(diff), na.rm=T))
head(abs(getValues(diff, na.rm=T)))
sum(abs(getValues(diff)), na.rm=T)
sum(abs(getValues(diff)), na.rm=F)
sum(getValues(diff), na.rm=T)
names <- c('Sp1', 'Sp2', 'Sp3', 'Sp4', 'Sp5', 'Sp6', 'Sp7')
results <- table(length(names),1)
colnames(resutls) <- c('Species', 'Rank_diff')
colnames(results) <- c('Species', 'Rank_diff')
results <- table(length(names),2)
colnames(results) <- c('Species', 'Rank_diff')
results
help(table)
help(create.table)
help(data.frame)
results <- data.frame(length(names),2)
results
results <- data.frame(names,2)
results
results <- data.frame(names,NA)
results
colnames(results) <- c('Species', 'Rank_diff')
results
out_all <- raster('Output/out_all.rank.asc')
for (i in 1:length(names)){
out_1missing <- raster(paste0('Output/out_missing', names[i], '.rank.asc'))
diff <- out_all - out_1missing
results[i,2] <- sum(abs(getValues(diff)), na.rm=T)
}
results
